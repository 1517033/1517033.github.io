<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>[leetcode] 35.Search Insert Position</title>
      <link href="/2022/03/13/leetcode/leetcode35/"/>
      <url>/2022/03/13/leetcode/leetcode35/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p><img src="https://cdn.jsdelivr.net/gh/1517033/picgodemo/img/2022-03-12 20-36-55屏幕截图.png" alt="题目"></p><h1 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h1><h2 id="Solution-one-二分查找-Binary-Search"><a href="#Solution-one-二分查找-Binary-Search" class="headerlink" title="Solution one 二分查找(Binary Search)"></a>Solution one 二分查找(Binary Search)</h2><ul><li><strong>时间复杂度：O(logn)</strong></li><li><strong>空间复杂度：O(1)</strong></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">searchInsert</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span> target)</span>&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span> , right = numsSize<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">        <span class="type">int</span> mid = left + (right-left)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[mid]==target)&#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[mid]&lt;target)&#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> left;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/1517033/picgodemo/img/2022-03-13%2010-34-52%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="评测结果"></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Binary Search </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[leetcode] 977. Squares of a Sorted Array</title>
      <link href="/2022/03/13/leetcode/leetcode977/"/>
      <url>/2022/03/13/leetcode/leetcode977/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p>Given an integer array <code>nums</code> sorted in <strong>non-decreasing</strong> order, return <em>an array of <strong>the squares of each number</strong> sorted in non-decreasing order</em>.</p><p><strong>Example 1:</strong></p><p><code>Input: nums = [-4,-1,0,3,10]</code></p><p><code>Output: [0,1,9,16,100]</code></p><p>Explanation: After squaring, the array becomes [16,1,0,9,100].<br>After sorting, it becomes [0,1,9,16,100].</p><p><strong>Example 2:</strong></p><p><code>Input: nums = [-7,-3,2,3,11]</code></p><p><code>Output: [4,9,9,49,121]</code></p><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 104</code></li><li><code>-104 &lt;= nums[i] &lt;= 104</code></li><li><code>nums</code> is sorted in <strong>non-decreasing</strong> order.</li></ul><p><strong>Follow up:</strong> Squaring each element and sorting the new array is very trivial, could you find an <code>O(n)</code> solution using a different approach?</p><h1 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h1><h2 id="Solution-one-直接排序"><a href="#Solution-one-直接排序" class="headerlink" title="Solution one 直接排序"></a>Solution one 直接排序</h2><ul><li><p><strong>时间复杂度：O(nlogn)</strong></p></li><li><p><strong>空间复杂度：O(logn)</strong>  除了存储答案的数组以外，我们需要 O(log⁡n) 的栈空间进行排序</p><p>思路：先把数组中的每个数平方，然后进行排序。</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">myCompare</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* _a,<span class="type">const</span> <span class="type">void</span>* _b)</span>&#123;</span><br><span class="line">    <span class="type">int</span> a = *(<span class="type">int</span>*)_a, b = *(<span class="type">int</span>*)_b;</span><br><span class="line">    <span class="keyword">return</span> a-b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span>* <span class="title function_">sortedSquares</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span>* returnSize)</span>&#123;</span><br><span class="line">    *returnSize = numsSize;</span><br><span class="line">    <span class="type">int</span>* ans = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*numsSize);</span><br><span class="line">    <span class="type">int</span> l = <span class="number">0</span>, r = numsSize<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">        ans[l] = nums[l] * nums[l];</span><br><span class="line">        ans[r] = nums[r] * nums[r];</span><br><span class="line">        l++;</span><br><span class="line">        r--;</span><br><span class="line">    &#125;</span><br><span class="line">    qsort(ans,numsSize,<span class="keyword">sizeof</span>(<span class="type">int</span>),myCompare);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Solution-two-双指针-Two-Pointers"><a href="#Solution-two-双指针-Two-Pointers" class="headerlink" title="Solution two 双指针 (Two Pointers)"></a>Solution two 双指针 (Two Pointers)</h2><ul><li>时间复杂度：O(n)</li><li>空间复杂度：O(1)</li></ul><p>​        思路：由于题目已经说明提供的数组是按升序排序的，所以如果负数平方之后可能变为一个很大的数，可以使用双两个指针 <code>left</code> 和 <code>right</code> 分别指向数组的开头和末尾。每次循环中，比j较nums[left]<sup>2</sup>  和 nums[right]<sup>2</sup> 的大小，将最大的那个值的逆序放入答案数组的末尾，随后改变相应的指针。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>* <span class="title function_">sortedSquares</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span>* returnSize)</span>&#123;</span><br><span class="line">    *returnSize = numsSize;</span><br><span class="line">    <span class="type">int</span>* ans = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*numsSize);</span><br><span class="line">    <span class="type">int</span> l = <span class="number">0</span>, r = numsSize<span class="number">-1</span>, i = numsSize<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;=r)&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="built_in">pow</span>(nums[l],<span class="number">2</span>)&lt;=<span class="built_in">pow</span>(nums[r],<span class="number">2</span>))&#123;</span><br><span class="line">            ans[i--] = <span class="built_in">pow</span>(nums[r--],<span class="number">2</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            ans[i--] = <span class="built_in">pow</span>(nums[l++],<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Solution-three-双指针-Two-Pointers"><a href="#Solution-three-双指针-Two-Pointers" class="headerlink" title="Solution three 双指针 (Two Pointers)"></a>Solution three 双指针 (Two Pointers)</h2><ul><li>时间复杂度：O(n)</li><li><p>空间复杂度：O(1)</p><p>思路：先找到负数与非负数的分界线，那么就可以用类似「归并排序」的方法了。</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span>* <span class="title function_">sortedSquares</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span>* returnSize)</span>&#123;</span><br><span class="line">    *returnSize = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span>* ans = (<span class="type">int</span>*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(<span class="type">int</span>)*numsSize);</span><br><span class="line">    <span class="type">int</span> separate = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;numsSize;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i]&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            separate = i;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> l = separate, r = separate + <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(l&gt;=<span class="number">0</span>||r&lt;numsSize)&#123;</span><br><span class="line">        <span class="keyword">if</span>(l&lt;<span class="number">0</span>)&#123;</span><br><span class="line">            ans[(*returnSize)++] = <span class="built_in">pow</span>(nums[r++],<span class="number">2</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(r == numsSize)&#123;</span><br><span class="line">            ans[(*returnSize)++] = <span class="built_in">pow</span>(nums[l--],<span class="number">2</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">pow</span>(nums[l],<span class="number">2</span>) &lt;= <span class="built_in">pow</span>(nums[r],<span class="number">2</span>))&#123;</span><br><span class="line">            ans[(*returnSize)++] = <span class="built_in">pow</span>(nums[l--],<span class="number">2</span>);</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            ans[(*returnSize)++] = <span class="built_in">pow</span>(nums[r++],<span class="number">2</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Two Pointers </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法讲解之二分查找</title>
      <link href="/2022/03/13/Algorithm/Binary%20Search/"/>
      <url>/2022/03/13/Algorithm/Binary%20Search/</url>
      
        <content type="html"><![CDATA[<p>转载于<a href="https://programmercarl.com">https://programmercarl.com</a></p><h1 id="什么是二分查找？"><a href="#什么是二分查找？" class="headerlink" title="什么是二分查找？"></a>什么是二分查找？</h1><p>​        二分查找也称折半查找（Binary Search），它是一种效率较高的查找方法。但是，折半查找要求线性表必须采用顺序存储结构，而且表中元素按关键字有序排列。</p><h1 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h1><p>​        首先，必须保证元素按大小的有序排列的。</p><p>​        定义target在left到right里，每次找left和right中间位置为mid元素，如果下标为mid的元素与target相等，则mid即为要查找位置的下标；如果小于target或大于target，则缩小区间的一半，重复执行上述操作，直到left与right之间只剩下一个元素为止。</p><h1 id="写法"><a href="#写法" class="headerlink" title="写法"></a>写法</h1><p>一般有两种写法，这两种写法的主要区别是区间的定义不相同。</p><ul><li>左闭右闭区间 [left,right]</li><li>左闭合开区间 [left,right)</li></ul><h2 id="写法一"><a href="#写法一" class="headerlink" title="写法一"></a>写法一</h2><p>定义targert在 [left,right] 区间里</p><ul><li>while (left &lt;= right) 要使用 &lt;= ，因为left == right是有意义的，所以使用 &lt;=</li><li>if (nums[mid] &gt; target) right要赋值为 mid - 1，因为当前这个nums[mid]一定不是target，那么接下来要查找的左区间结束下标位置就是 mid - 1</li></ul><p>例如在数组：1,2,3,4,7,9,10中查找元素2</p><p><img src="https://pic.leetcode-cn.com/1630891550-yihtoV-file_1630891549701" alt="https://pic.leetcode-cn.com/1630891550-yihtoV-file_1630891549701"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numSize, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="comment">// 定义target在左闭右闭的区间里，[left, right]</span></span><br><span class="line">       <span class="type">int</span> left = <span class="number">0</span> ,right = numSize - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 当left==right，区间[left, right]依然有效，所以用 &lt;=</span></span><br><span class="line">       <span class="keyword">while</span> (left &lt;= right) &#123;</span><br><span class="line">           <span class="comment">// 防止溢出 等同于(left + right)/2</span></span><br><span class="line">           <span class="type">int</span> mid = left + ((right - left) / <span class="number">2</span>);</span><br><span class="line">           <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">               <span class="comment">// target 在左区间，所以[left, mid - 1]</span></span><br><span class="line">               right = mid - <span class="number">1</span>; </span><br><span class="line">           &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">               <span class="comment">// target 在右区间，所以[mid + 1, right]</span></span><br><span class="line">               left = mid + <span class="number">1</span>; </span><br><span class="line">           &#125; <span class="keyword">else</span> &#123; <span class="comment">// nums[mid] == target</span></span><br><span class="line">               <span class="keyword">return</span> mid; <span class="comment">// 数组中找到目标值，直接返回下标</span></span><br><span class="line">           &#125;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 未找到目标值</span></span><br><span class="line">       <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><h2 id="写法二"><a href="#写法二" class="headerlink" title="写法二"></a>写法二</h2><p>定义targert在 [left,right)区间里</p><ul><li>while (left &lt; right)，这里使用 &lt; ,因为left == right在区间[left, right)是没有意义的</li><li>if (nums[mid] &gt; target) right 更新为  mid，因为当前nums[mid]不等于target，去左区间继续寻找，而寻找区间是左闭右开区间，所以right更新为mid，即：下一个查询区间不会去比较nums[mid]</li></ul><p>在数组：1,2,3,4,7,9,10中查找元素2</p><p><img src="https://pic.leetcode-cn.com/1630891550-XiTCdp-file_1630891549708" alt="https://pic.leetcode-cn.com/1630891550-XiTCdp-file_1630891549708"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numSize, <span class="type">int</span> target)</span> &#123;</span><br><span class="line">    <span class="comment">// 定义target在左闭右开的区间里，即：[left, right)</span></span><br><span class="line">        <span class="type">int</span> left = <span class="number">0</span> ,right = numSize - <span class="number">1</span>;</span><br><span class="line">    <span class="comment">// 因为left == right的时候，在[left, right)是无效的空间，所以使用 &lt;</span></span><br><span class="line">        <span class="keyword">while</span> (left &lt; right) &#123; </span><br><span class="line">            <span class="type">int</span> mid = left + ((right - left) &gt;&gt; <span class="number">1</span>);</span><br><span class="line">            <span class="keyword">if</span> (nums[mid] &gt; target) &#123;</span><br><span class="line">                right = mid; <span class="comment">// target 在左区间，在[left, mid)中</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (nums[mid] &lt; target) &#123;</span><br><span class="line">                left = mid + <span class="number">1</span>; <span class="comment">// target 在右区间，在[mid + 1, right)中</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123; <span class="comment">// nums[mid] == target</span></span><br><span class="line">                <span class="keyword">return</span> mid; <span class="comment">// 数组中找到目标值，直接返回下标</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 未找到目标值</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Algorithm </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Binary Search </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[leetcode] 278.First Bad Version</title>
      <link href="/2022/03/12/leetcode/leetcode278/"/>
      <url>/2022/03/12/leetcode/leetcode278/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p><img src="https://cdn.jsdelivr.net/gh/1517033/picgodemo/img/2022-03-12%2020-14-15%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="题目"></p><h1 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h1><h2 id="Solution-one-二分查找-Binary-Search"><a href="#Solution-one-二分查找-Binary-Search" class="headerlink" title="Solution one 二分查找(Binary Search)"></a>Solution one 二分查找(Binary Search)</h2><ul><li><p><strong>时间复杂度：O(logn)</strong></p></li><li><p><strong>空间复杂度：O(1)</strong></p><p>  思路：由于题目中明确给出了每个版本都是基于之前的版本开发的，也就是说错误的版本是连续的，则可以通过二分查找的方式来查找第一个错误的版本。如果mid是错误版本，那么第一个错误版本一定在left到mid之间；否则错误版本在mid到right之间。</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// The API isBadVersion is defined for you.</span></span><br><span class="line"><span class="comment">// bool isBadVersion(int version);</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">firstBadVersion</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">    <span class="type">int</span> l = <span class="number">1</span>,r = n;</span><br><span class="line">    <span class="keyword">while</span>(l&lt;r)&#123;</span><br><span class="line">        <span class="type">int</span> mid = l + (r-l)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(isBadVersion(mid))&#123;</span><br><span class="line">            r = mid;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            l = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> l;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/1517033/picgodemo/img/2022-03-12%2020-12-12%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="评测结果"></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Binary Search </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[leetcode] 704.Contains Duplicate</title>
      <link href="/2022/03/11/leetcode/leetcode704/"/>
      <url>/2022/03/11/leetcode/leetcode704/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p><img src="https://cdn.jsdelivr.net/gh/1517033/picgodemo/img/2022-03-11%2018-19-00%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="题目"></p><h1 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h1><ul><li>时间复杂度：O(logn)</li><li>空间复杂度：O(1)</li></ul><p>二分查找的做法是，定义查找的范围[left,right]，初始查找范围是整个数组。每次取查找范围的中点 mid，比较 nums[mid]和 target的大小，如果相等则 mid即为要寻找的下标，如果不相等则根据 nums[mid] 和 target的大小关系将查找范围缩小一半。</p><p>由于每次查找都会将查找范围缩小一半，因此二分查找的时间复杂度是 O(logn)，其中 n是数组的长度。</p><p>二分查找的条件是查找范围不为空，即 left≤right。如果 target在数组中，二分查找可以保证找到 target，返回 target在数组中的下标。如果 target 不在数组中，则当 left&gt;right 时结束查找，返回 −1。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">search</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize, <span class="type">int</span> target)</span>&#123;</span><br><span class="line">    <span class="type">int</span> left = <span class="number">0</span>, right = numsSize<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(left&lt;=right)&#123;</span><br><span class="line">        <span class="type">int</span> mid = left+ (right-left)/<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span>(nums[mid]==target)&#123;</span><br><span class="line">            <span class="keyword">return</span> mid;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(nums[mid]&lt;target)&#123;</span><br><span class="line">            left = mid + <span class="number">1</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">            right = mid - <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/1517033/picgodemo/img/2022-03-11%20%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="评测结果"></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Binary Search </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++ STL 之 unordered_set</title>
      <link href="/2022/03/11/STL/unordered_set/"/>
      <url>/2022/03/11/STL/unordered_set/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是unordered-set"><a href="#什么是unordered-set" class="headerlink" title="什么是unordered_set?"></a>什么是unordered_set?</h1><p>unordered_set 是C++11为STL标准库添加的一种无序（哈希容器），它允许根据元素的值快速检索单个元素，可以被插入和删除，但不能对其中的元素做修改。</p><h1 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h1><ul><li><p><a href="http://www.cplusplus.com/reference/unordered_set/unordered_set/empty/"><strong>empty</strong></a></p><p>Test whether container is empty (public member function)查看是否为空</p></li><li><p><a href="http://www.cplusplus.com/reference/unordered_set/unordered_set/size/"><strong>size</strong></a></p><p>Return container size (public member function)获取元素个数</p></li><li><p><a href="http://www.cplusplus.com/reference/unordered_set/unordered_set/max_size/"><strong>max_size</strong></a></p><p>Return maximum size (public member function) 获取容量</p></li></ul><ul><li><p><a href="http://www.cplusplus.com/reference/unordered_set/unordered_set/find/"><strong>find</strong></a></p><p>Get iterator to element (public member function)查找元素</p></li><li><p><a href="http://www.cplusplus.com/reference/unordered_set/unordered_set/insert/"><strong>insert</strong></a></p><p>Insert elements (public member function )插入元素</p></li><li><p><a href="http://www.cplusplus.com/reference/unordered_set/unordered_set/erase/"><strong>erase</strong></a></p><p>Erase elements (public member function )删除元素</p></li></ul><p><strong><a href="http://www.cplusplus.com/reference/unordered_set/unordered_set/">详细查看该文档</a></strong></p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h2 id="需要引入的头文件"><a href="#需要引入的头文件" class="headerlink" title="需要引入的头文件"></a>需要引入的头文件</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_set&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="容量-Capacity"><a href="#容量-Capacity" class="headerlink" title="容量(Capacity)"></a>容量(Capacity)</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义元素的类型为int</span></span><br><span class="line">unordered_set&lt;<span class="type">int</span>&gt; set;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否为空</span></span><br><span class="line">set.<span class="built_in">empty</span>()</span><br><span class="line">    </span><br><span class="line"><span class="comment">//获取元素个数</span></span><br><span class="line">set.<span class="built_in">size</span>()</span><br><span class="line">    </span><br><span class="line"><span class="comment">//获取容量</span></span><br><span class="line">set.<span class="built_in">max_size</span>()</span><br></pre></td></tr></table></figure><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查找函数 find() 通过给定主键查找元素</span></span><br><span class="line">unordered_set&lt;<span class="type">int</span>&gt;::iterator find_iter = c1.<span class="built_in">find</span>(<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//value出现的次数 count() 返回匹配给定主键的元素的个数</span></span><br><span class="line">c1.<span class="built_in">count</span>(<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//插入函数 emplace()</span></span><br><span class="line">c1.<span class="built_in">emplace</span>(<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//插入函数 emplace_hint() 使用迭代器</span></span><br><span class="line">c1.<span class="built_in">emplace_hint</span>(ite_begin, <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//插入函数 insert()</span></span><br><span class="line">c1.<span class="built_in">insert</span>(<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//删除 erase()</span></span><br><span class="line">c1.<span class="built_in">erase</span>(<span class="number">1</span>);<span class="comment">//1.迭代器 value 区域</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//清空 clear()</span></span><br><span class="line">c1.<span class="built_in">clear</span>();</span><br><span class="line">    </span><br><span class="line"><span class="comment">//交换 swap()</span></span><br><span class="line">c1.<span class="built_in">swap</span>(c2);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[leetcode] 217.Contains Duplicate</title>
      <link href="/2022/03/11/leetcode/leetcode217/"/>
      <url>/2022/03/11/leetcode/leetcode217/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p><img src="https://cdn.jsdelivr.net/gh//1517033/picgodemo/img/2022-03-11 15-02-24屏幕截图.png" alt="题目"></p><h1 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h1><h2 id="Solution-one-排序-sort"><a href="#Solution-one-排序-sort" class="headerlink" title="Solution one 排序(sort)"></a>Solution one 排序(sort)</h2><p><strong>时间复杂度：O(nlogn)</strong></p><p><strong>空间复杂度：O(1)</strong></p><p>先将数组进行排序，则相等的数一定在相邻位置，则可以遍历数组找到是否有重复元素。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">myCompare</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* _a, <span class="type">const</span> <span class="type">void</span>* _b)</span>&#123;</span><br><span class="line">    <span class="type">int</span> a = *(<span class="type">int</span>*)_a , b = *(<span class="type">int</span>*)_b;</span><br><span class="line">    <span class="keyword">return</span> a-b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">containsDuplicate</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize)</span>&#123;</span><br><span class="line">    qsort(nums,numsSize,<span class="keyword">sizeof</span>(<span class="type">int</span>),myCompare);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;numsSize<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i]==nums[i+<span class="number">1</span>])&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/1517033/picgodemo/img/2022-03-11%2015-20-32%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="评测结果"></p><h2 id="Solution-two-哈希表-Hash-Table"><a href="#Solution-two-哈希表-Hash-Table" class="headerlink" title="Solution two 哈希表 (Hash Table)"></a>Solution two 哈希表 (Hash Table)</h2><p>时间复杂度：O(n)</p><p>空间复杂度：O(n)</p><p>遍历数组中的每个元素，将元素插入到哈希表中，如果哈希表要插入的位置存在元素，则存在重复元素；否则，不存在重复元素。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">containsDuplicate</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; set;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (set.<span class="built_in">find</span>(num) != set.<span class="built_in">end</span>())&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            set.<span class="built_in">insert</span>(num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/1517033/picgodemo/img/2022-03-11%2016-41-46%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="评测结果"></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> data structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[leetcode] 70.Climbing Stairs</title>
      <link href="/2022/03/11/leetcode/leetcode70/"/>
      <url>/2022/03/11/leetcode/leetcode70/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p><img src="https://cdn.jsdelivr.net/gh/1517033/picgodemo/img/2022-03-11%2013-09-10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="2022-03-11 13-09-10屏幕截图"></p><h1 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h1><h2 id="Solution-one-动态规划-dynamic-programming"><a href="#Solution-one-动态规划-dynamic-programming" class="headerlink" title="Solution one  动态规划(dynamic programming)"></a>Solution one  动态规划(dynamic programming)</h2><p><strong>时间复杂度：O(n)</strong></p><p><strong>空间复杂度：O(1)</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">climbStairs</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="type">int</span> num[<span class="number">3</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        num[<span class="number">0</span>] = num[<span class="number">1</span>];</span><br><span class="line">        num[<span class="number">1</span>] = num[<span class="number">2</span>];</span><br><span class="line">        num[<span class="number">2</span>] = num[<span class="number">0</span>] + num[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num[<span class="number">2</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/1517033/picgodemo/img/2022-03-11%2013-08-21%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="2022-03-11 13-08-21屏幕截图"></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dynamic programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[leetcode] 53.Maximum Subarray</title>
      <link href="/2022/03/10/leetcode/leetcode53/"/>
      <url>/2022/03/10/leetcode/leetcode53/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p><img src="https://cdn.jsdelivr.net/gh/1517033/picgodemo/img/2022-03-10%2017-48-34%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="题目"></p><p><strong>Example 1:</strong></p><p><code>Input: nums = [-2,1,-3,4,-1,2,1,-5,4]</code><br/><br><code>Output: 6</code><br/><br><code>Explanation: [4,-1,2,1] has the largest sum = 6.</code></p><p><strong>Example 2:</strong></p><p><code>Input: nums = [1]</code><br/><br><code>Output: 1</code></p><p><strong>Example 3:</strong></p><p><code>Input: nums = [5,4,-1,7,8]</code><br/><br><code>Output: 23</code></p><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 105</code></li><li><p><code>-104 &lt;= nums[i] &lt;= 104</code></p><p><strong>Follow up:</strong> If you have figured out the <code>O(n)</code> solution, try coding another solution using the <strong>divide and conquer</strong> approach, which is more subtle.</p></li></ul><h1 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h1><h2 id="Solution-one-分治法-Divide-and-Conquer"><a href="#Solution-one-分治法-Divide-and-Conquer" class="headerlink" title="Solution one (分治法 Divide and Conquer)"></a>Solution one (分治法 Divide and Conquer)</h2><p><strong>时间复杂度：O(nlogn)</strong>    </p><p>这个分治法的思想类似与二分搜索法，假设最大子序列存在，则仅有三种情况：</p><ul><li>在中点左侧[begin:mid]</li><li>在中点右侧[mid+1:end]</li><li>跨越了中点</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">getMax</span><span class="params">(<span class="type">int</span>* nums,<span class="type">int</span> left,<span class="type">int</span> right)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left&gt;=right)&#123;</span><br><span class="line">        <span class="keyword">return</span> nums[left];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = left+(right-left)/<span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> leftMax = getMax(nums,left,mid<span class="number">-1</span>);</span><br><span class="line">    <span class="type">int</span> rightMax = getMax(nums,mid+<span class="number">1</span>,right);</span><br><span class="line">    <span class="type">int</span> midMax = nums[mid],sum = midMax;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = mid<span class="number">-1</span>; i &gt;=left ; --i) &#123;</span><br><span class="line">        sum += nums[i];</span><br><span class="line">        midMax = midMax&gt;sum?midMax:sum;</span><br><span class="line">    &#125;</span><br><span class="line">    sum = midMax;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = mid+<span class="number">1</span>; i &lt;=right ; ++i) &#123;</span><br><span class="line">        sum += nums[i];</span><br><span class="line">        midMax = midMax&gt;sum?midMax:sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> max = leftMax&gt;rightMax?leftMax:rightMax;</span><br><span class="line">    max = max&gt;midMax?max:midMax;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">maxSubArray</span><span class="params">(<span class="type">int</span>* nums,<span class="type">int</span> numSize)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (numSize==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> getMax(nums,<span class="number">0</span>,numSize<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/1517033/picgodemo/img/2022-03-11%2009-56-29%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="评测结果"></p><h2 id="Solution-two-卡达内算法-Kadane’s-Algorithm"><a href="#Solution-two-卡达内算法-Kadane’s-Algorithm" class="headerlink" title="Solution two (卡达内算法 Kadane’s Algorithm)"></a>Solution two (卡达内算法 Kadane’s Algorithm)</h2><p><strong>时间复杂度： O(n)</strong> <br/></p><p><strong>空间复杂度：O(1)</strong></p><p>​        这个算法的基本思想就是从第一个数开始相加，如果前面数的和加上这个数的和比这个数小，则让和等于这个数；否则，让和加上这个数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">maxSubArray</span><span class="params">(<span class="type">int</span>* nums,<span class="type">int</span> numSize)</span>&#123;</span><br><span class="line">    <span class="type">int</span> sum = nums[<span class="number">0</span>],max = nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;numSize;i++)&#123;</span><br><span class="line">        sum += nums[i];</span><br><span class="line">        <span class="keyword">if</span>(sum &lt;= nums[i])&#123;</span><br><span class="line">            sum = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sum &gt; max)&#123;</span><br><span class="line">            max = sum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/1517033/picgodemo/img/2022-03-10%2020-49-26%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="评测结果"></p><h2 id="Solution-three-动态规划-dynamic-programming"><a href="#Solution-three-动态规划-dynamic-programming" class="headerlink" title="Solution three (动态规划  dynamic programming )"></a>Solution three (动态规划  dynamic programming )</h2><p><strong>时间复杂度： O(n)</strong> <br/><br><strong>空间复杂度： O(1)</strong></p><p>​        这个算法的基本思想就是如果前一个数大于0，则将其加到当前元素上；否则，保持不变。同时比较获取最大值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">maxSubArray</span><span class="params">(<span class="type">int</span>* nums,<span class="type">int</span> numSize)</span>&#123;</span><br><span class="line">    <span class="type">int</span> max = nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;numSize;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i<span class="number">-1</span>]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            nums[i]+=nums[i<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(nums[i]&gt;max)&#123;</span><br><span class="line">            max = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/1517033/picgodemo/img/2022-03-10 22-34-19屏幕截图.png" alt="评测结果"></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Divide and Conquer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/03/08/hello-world/"/>
      <url>/2022/03/08/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
