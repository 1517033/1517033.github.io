<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>C++ STL 之 unordered_set</title>
      <link href="/2022/03/11/STL/unordered_set/"/>
      <url>/2022/03/11/STL/unordered_set/</url>
      
        <content type="html"><![CDATA[<h1 id="什么是unordered-set"><a href="#什么是unordered-set" class="headerlink" title="什么是unordered_set?"></a>什么是unordered_set?</h1><p>unordered_set 是C++11为STL标准库添加的一种无序（哈希容器），它允许根据元素的值快速检索单个元素，可以被插入和删除，但不能对其中的元素做修改。</p><h1 id="常用函数"><a href="#常用函数" class="headerlink" title="常用函数"></a>常用函数</h1><ul><li><p><a href="http://www.cplusplus.com/reference/unordered_set/unordered_set/empty/"><strong>empty</strong></a></p><p>Test whether container is empty (public member function)查看是否为空</p></li><li><p><a href="http://www.cplusplus.com/reference/unordered_set/unordered_set/size/"><strong>size</strong></a></p><p>Return container size (public member function)获取元素个数</p></li><li><p><a href="http://www.cplusplus.com/reference/unordered_set/unordered_set/max_size/"><strong>max_size</strong></a></p><p>Return maximum size (public member function) 获取容量</p></li></ul><ul><li><p><a href="http://www.cplusplus.com/reference/unordered_set/unordered_set/find/"><strong>find</strong></a></p><p>Get iterator to element (public member function)查找元素</p></li><li><p><a href="http://www.cplusplus.com/reference/unordered_set/unordered_set/insert/"><strong>insert</strong></a></p><p>Insert elements (public member function )插入元素</p></li><li><p><a href="http://www.cplusplus.com/reference/unordered_set/unordered_set/erase/"><strong>erase</strong></a></p><p>Erase elements (public member function )删除元素</p></li></ul><p><strong><a href="http://www.cplusplus.com/reference/unordered_set/unordered_set/">详细查看该文档</a></strong></p><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><h2 id="需要引入的头文件"><a href="#需要引入的头文件" class="headerlink" title="需要引入的头文件"></a>需要引入的头文件</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;unordered_set&gt;</span></span></span><br></pre></td></tr></table></figure><h2 id="容量-Capacity"><a href="#容量-Capacity" class="headerlink" title="容量(Capacity)"></a>容量(Capacity)</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义元素的类型为int</span></span><br><span class="line">unordered_set&lt;<span class="type">int</span>&gt; set;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否为空</span></span><br><span class="line">set.<span class="built_in">empty</span>()</span><br><span class="line">    </span><br><span class="line"><span class="comment">//获取元素个数</span></span><br><span class="line">set.<span class="built_in">size</span>()</span><br><span class="line">    </span><br><span class="line"><span class="comment">//获取容量</span></span><br><span class="line">set.<span class="built_in">max_size</span>()</span><br></pre></td></tr></table></figure><h2 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查找函数 find() 通过给定主键查找元素</span></span><br><span class="line">unordered_set&lt;<span class="type">int</span>&gt;::iterator find_iter = c1.<span class="built_in">find</span>(<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//value出现的次数 count() 返回匹配给定主键的元素的个数</span></span><br><span class="line">c1.<span class="built_in">count</span>(<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//插入函数 emplace()</span></span><br><span class="line">c1.<span class="built_in">emplace</span>(<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//插入函数 emplace_hint() 使用迭代器</span></span><br><span class="line">c1.<span class="built_in">emplace_hint</span>(ite_begin, <span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//插入函数 insert()</span></span><br><span class="line">c1.<span class="built_in">insert</span>(<span class="number">1</span>);</span><br><span class="line">    </span><br><span class="line"><span class="comment">//删除 erase()</span></span><br><span class="line">c1.<span class="built_in">erase</span>(<span class="number">1</span>);<span class="comment">//1.迭代器 value 区域</span></span><br><span class="line">    </span><br><span class="line"><span class="comment">//清空 clear()</span></span><br><span class="line">c1.<span class="built_in">clear</span>();</span><br><span class="line">    </span><br><span class="line"><span class="comment">//交换 swap()</span></span><br><span class="line">c1.<span class="built_in">swap</span>(c2);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> C/C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> STL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[leetcode] 217.Contains Duplicate</title>
      <link href="/2022/03/11/leetcode/leetcode217/"/>
      <url>/2022/03/11/leetcode/leetcode217/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p><img src="https://cdn.jsdelivr.net/gh//1517033/picgodemo/img/2022-03-11 15-02-24屏幕截图.png" alt="题目"></p><h1 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h1><h2 id="Solution-one-排序-sort"><a href="#Solution-one-排序-sort" class="headerlink" title="Solution one 排序(sort)"></a>Solution one 排序(sort)</h2><p><strong>时间复杂度：O(nlogn)</strong></p><p><strong>空间复杂度：O(1)</strong></p><p>先将数组进行排序，则相等的数一定在相邻位置，则可以遍历数组找到是否有重复元素。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">myCompare</span><span class="params">(<span class="type">const</span> <span class="type">void</span>* _a, <span class="type">const</span> <span class="type">void</span>* _b)</span>&#123;</span><br><span class="line">    <span class="type">int</span> a = *(<span class="type">int</span>*)_a , b = *(<span class="type">int</span>*)_b;</span><br><span class="line">    <span class="keyword">return</span> a-b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">bool</span> <span class="title function_">containsDuplicate</span><span class="params">(<span class="type">int</span>* nums, <span class="type">int</span> numsSize)</span>&#123;</span><br><span class="line">    qsort(nums,numsSize,<span class="keyword">sizeof</span>(<span class="type">int</span>),myCompare);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>;i&lt;numsSize<span class="number">-1</span>;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i]==nums[i+<span class="number">1</span>])&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/1517033/picgodemo/img/2022-03-11%2015-20-32%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="评测结果"></p><h2 id="Solution-two-哈希表-Hash-Table"><a href="#Solution-two-哈希表-Hash-Table" class="headerlink" title="Solution two 哈希表 (Hash Table)"></a>Solution two 哈希表 (Hash Table)</h2><p>时间复杂度：O(n)</p><p>空间复杂度：O(n)</p><p>遍历数组中的每个元素，将元素插入到哈希表中，如果哈希表要插入的位置存在元素，则存在重复元素；否则，不存在重复元素。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">bool</span> <span class="title">containsDuplicate</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        unordered_set&lt;<span class="type">int</span>&gt; set;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> num : nums) &#123;</span><br><span class="line">            <span class="keyword">if</span> (set.<span class="built_in">find</span>(num) != set.<span class="built_in">end</span>())&#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            set.<span class="built_in">insert</span>(num);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/1517033/picgodemo/img/2022-03-11%2016-41-46%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="评测结果"></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> data structure </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[leetcode] 70.Climbing Stairs</title>
      <link href="/2022/03/11/leetcode/leetcode70/"/>
      <url>/2022/03/11/leetcode/leetcode70/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p><img src="https://cdn.jsdelivr.net/gh/1517033/picgodemo/img/2022-03-11%2013-09-10%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="2022-03-11 13-09-10屏幕截图"></p><h1 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h1><h2 id="Solution-one-动态规划-dynamic-programming"><a href="#Solution-one-动态规划-dynamic-programming" class="headerlink" title="Solution one  动态规划(dynamic programming)"></a>Solution one  动态规划(dynamic programming)</h2><p><strong>时间复杂度：O(n)</strong></p><p><strong>空间复杂度：O(1)</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">climbStairs</span><span class="params">(<span class="type">int</span> n)</span>&#123;</span><br><span class="line">    <span class="type">int</span> num[<span class="number">3</span>]=&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">        num[<span class="number">0</span>] = num[<span class="number">1</span>];</span><br><span class="line">        num[<span class="number">1</span>] = num[<span class="number">2</span>];</span><br><span class="line">        num[<span class="number">2</span>] = num[<span class="number">0</span>] + num[<span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num[<span class="number">2</span>];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/1517033/picgodemo/img/2022-03-11%2013-08-21%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="2022-03-11 13-08-21屏幕截图"></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> dynamic programming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>[leetcode] Maximum Subarray</title>
      <link href="/2022/03/10/leetcode/leetcode53/"/>
      <url>/2022/03/10/leetcode/leetcode53/</url>
      
        <content type="html"><![CDATA[<h1 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h1><p><img src="https://cdn.jsdelivr.net/gh/1517033/picgodemo/img/2022-03-10%2017-48-34%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="题目"></p><p><strong>Example 1:</strong></p><p><code>Input: nums = [-2,1,-3,4,-1,2,1,-5,4]</code><br/><br><code>Output: 6</code><br/><br><code>Explanation: [4,-1,2,1] has the largest sum = 6.</code></p><p><strong>Example 2:</strong></p><p><code>Input: nums = [1]</code><br/><br><code>Output: 1</code></p><p><strong>Example 3:</strong></p><p><code>Input: nums = [5,4,-1,7,8]</code><br/><br><code>Output: 23</code></p><p><strong>Constraints:</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 105</code></li><li><p><code>-104 &lt;= nums[i] &lt;= 104</code></p><p><strong>Follow up:</strong> If you have figured out the <code>O(n)</code> solution, try coding another solution using the <strong>divide and conquer</strong> approach, which is more subtle.</p></li></ul><h1 id="Solutions"><a href="#Solutions" class="headerlink" title="Solutions"></a>Solutions</h1><h2 id="Solution-one-分治法-Divide-and-Conquer"><a href="#Solution-one-分治法-Divide-and-Conquer" class="headerlink" title="Solution one (分治法 Divide and Conquer)"></a>Solution one (分治法 Divide and Conquer)</h2><p><strong>时间复杂度：O(nlogn)</strong>    </p><p>这个分治法的思想类似与二分搜索法，假设最大子序列存在，则仅有三种情况：</p><ul><li>在中点左侧[begin:mid]</li><li>在中点右侧[mid+1:end]</li><li>跨越了中点</li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">getMax</span><span class="params">(<span class="type">int</span>* nums,<span class="type">int</span> left,<span class="type">int</span> right)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (left&gt;=right)&#123;</span><br><span class="line">        <span class="keyword">return</span> nums[left];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> mid = left+(right-left)/<span class="number">2</span>;</span><br><span class="line">    <span class="type">int</span> leftMax = getMax(nums,left,mid<span class="number">-1</span>);</span><br><span class="line">    <span class="type">int</span> rightMax = getMax(nums,mid+<span class="number">1</span>,right);</span><br><span class="line">    <span class="type">int</span> midMax = nums[mid],sum = midMax;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = mid<span class="number">-1</span>; i &gt;=left ; --i) &#123;</span><br><span class="line">        sum += nums[i];</span><br><span class="line">        midMax = midMax&gt;sum?midMax:sum;</span><br><span class="line">    &#125;</span><br><span class="line">    sum = midMax;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = mid+<span class="number">1</span>; i &lt;=right ; ++i) &#123;</span><br><span class="line">        sum += nums[i];</span><br><span class="line">        midMax = midMax&gt;sum?midMax:sum;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> max = leftMax&gt;rightMax?leftMax:rightMax;</span><br><span class="line">    max = max&gt;midMax?max:midMax;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> <span class="title function_">maxSubArray</span><span class="params">(<span class="type">int</span>* nums,<span class="type">int</span> numSize)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (numSize==<span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> getMax(nums,<span class="number">0</span>,numSize<span class="number">-1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/1517033/picgodemo/img/2022-03-11%2009-56-29%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="评测结果"></p><h2 id="Solution-two-卡达内算法-Kadane’s-Algorithm"><a href="#Solution-two-卡达内算法-Kadane’s-Algorithm" class="headerlink" title="Solution two (卡达内算法 Kadane’s Algorithm)"></a>Solution two (卡达内算法 Kadane’s Algorithm)</h2><p><strong>时间复杂度： O(n)</strong> <br/></p><p><strong>空间复杂度：O(1)</strong></p><p>​        这个算法的基本思想就是从第一个数开始相加，如果前面数的和加上这个数的和比这个数小，则让和等于这个数；否则，让和加上这个数。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">maxSubArray</span><span class="params">(<span class="type">int</span>* nums,<span class="type">int</span> numSize)</span>&#123;</span><br><span class="line">    <span class="type">int</span> sum = nums[<span class="number">0</span>],max = nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;numSize;i++)&#123;</span><br><span class="line">        sum += nums[i];</span><br><span class="line">        <span class="keyword">if</span>(sum &lt;= nums[i])&#123;</span><br><span class="line">            sum = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(sum &gt; max)&#123;</span><br><span class="line">            max = sum;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/1517033/picgodemo/img/2022-03-10%2020-49-26%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE.png" alt="评测结果"></p><h2 id="Solution-three-动态规划-dynamic-programming"><a href="#Solution-three-动态规划-dynamic-programming" class="headerlink" title="Solution three (动态规划  dynamic programming )"></a>Solution three (动态规划  dynamic programming )</h2><p><strong>时间复杂度： O(n)</strong> <br/><br><strong>空间复杂度： O(1)</strong></p><p>​        这个算法的基本思想就是如果前一个数大于0，则将其加到当前元素上；否则，保持不变。同时比较获取最大值。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">maxSubArray</span><span class="params">(<span class="type">int</span>* nums,<span class="type">int</span> numSize)</span>&#123;</span><br><span class="line">    <span class="type">int</span> max = nums[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;numSize;i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(nums[i<span class="number">-1</span>]&gt;<span class="number">0</span>)&#123;</span><br><span class="line">            nums[i]+=nums[i<span class="number">-1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(nums[i]&gt;max)&#123;</span><br><span class="line">            max = nums[i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> max;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/1517033/picgodemo/img/2022-03-10 22-34-19屏幕截图.png" alt="评测结果"></p>]]></content>
      
      
      <categories>
          
          <category> LeetCode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Divide and Conquer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2022/03/08/hello-world/"/>
      <url>/2022/03/08/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
